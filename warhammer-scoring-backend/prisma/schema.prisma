generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Army {
  id           Int      @id @default(autoincrement())
  name         String   @unique(map: "unique_army") @db.VarChar(50)
  isDeleted    Boolean? @default(false) @map("is_deleted")
  detachments  Detachment[]
  gamesOpponent Game[]  @relation("gamesOpponent")
  gamesUser     Game[]  @relation("gamesUser")

  @@map("armies")
}

model Detachment {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(50)
  armyId         Int       @map("army_id")
  isDeleted      Boolean?  @default(false) @map("is_deleted")
  army           Army      @relation(fields: [armyId], references: [id], map: "fk_detachments_armies")
  gamesUser      Game[]    @relation("gamesUserDetachment")
  gamesOpponent  Game[]    @relation("gamesOpponentDetachment")

  @@unique([name, armyId], map: "unique_name_army")
  @@map("detachments")
}

model Game {
  id                     Int         @id @default(autoincrement())
  userId                 Int         @map("user_id")
  userArmyId             Int         @map("user_army_id")
  opponentArmyId         Int         @map("opponent_army_id")
  userDetachmentId       Int         @map("user_detachment_id")
  opponentDetachmentId   Int         @map("opponent_detachment_id")
  date                   DateTime    @db.Date
  userScore              Int         @map("user_score")
  opponentScore          Int         @map("opponent_score")
  userWtcScore           Int         @map("user_wtc_score")
  opponentWtcScore       Int         @map("opponent_wtc_score")
  isTournament           Boolean     @map("is_tournament")
  tournamentName         String?     @db.VarChar(50) @map("tournament_name")

  userDetachment         Detachment  @relation("gamesUserDetachment", fields: [userDetachmentId], references: [id], map: "fk_games-detachments_user_detachment_id")
  opponentDetachment     Detachment  @relation("gamesOpponentDetachment", fields: [opponentDetachmentId], references: [id], map: "fk_games_detachments_opponent_detachment_id")
  opponentArmy           Army        @relation("gamesOpponent", fields: [opponentArmyId], references: [id], map: "fk_games_armies_opponent_army_id")
  userArmy               Army        @relation("gamesUser", fields: [userArmyId], references: [id], map: "fk_games_armies_user_army_id")
  user                   User        @relation(fields: [userId], references: [id], map: "fk_games_users")

  @@index([date], map: "idx_games_date")
  @@index([opponentArmyId], map: "idx_games_opponent_army_id")
  @@index([opponentDetachmentId], map: "idx_games_opponent_detachment_id")
  @@index([userArmyId], map: "idx_games_user_army_id")
  @@index([userDetachmentId], map: "idx_games_user_detachment_id")
  @@index([userId], map: "idx_games_user_id")
  @@map("games")
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique(map: "unique_username") @db.VarChar(50)
  email    String   @unique(map: "unique_email") @db.VarChar(100)
  password String   @db.VarChar(255)
  isAdmin  Boolean? @default(false) @map("is_admin")
  games    Game[]

  @@map("users")
}
